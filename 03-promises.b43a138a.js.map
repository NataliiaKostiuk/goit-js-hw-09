{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAcF,SAASC,cAAc,qBACrCE,EAAaH,SAASC,cAAc,qBACpCG,EAAYJ,SAASC,cAAc,oBA4BzC,SAASI,EAAcC,EAAUC,GACf,IAAIC,SAAQ,CAACC,EAASC,KACdC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEI,SAAAP,EAAUQ,MAAAP,IAEpBG,EAAO,CAAEG,SAAAP,EAAUQ,MAAAP,GAAQ,IAG5BQ,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MACjBE,EAAAnB,GAASoB,OAAOC,QACd,uBAAqBL,EAAY,QAASC,MAAU,IAGvDK,OAAM,EAACN,SAAEA,EAAQC,MAAEA,MAClBE,EAAAnB,GAASoB,OAAOG,QACd,sBAAoBP,EAAU,QAASC,MAAU,G,CA3CxCd,SAASC,cAAc,UAC/BoB,iBAAiB,SAE1B,SAAwBC,GAEtB,GADAA,EAAIC,iBAEoB,KAAtBrB,EAAYsB,OACS,KAArBrB,EAAWqB,OACS,KAApBpB,EAAUoB,MACV,CACA,IAAIC,EAASC,OAAOxB,EAAYsB,OAC5BV,EAAQY,OAAOvB,EAAWqB,OAC1BG,EAAOD,OAAOtB,EAAUoB,QAQhC,SAAgCC,EAAQX,EAAOa,GAC7C,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC/BC,WAAWxB,EAAeS,EAAOc,EAAGd,GACpCA,GAASa,C,CAVTG,CAAuBL,EAAQX,EAAOa,GACtC5B,EAAKgC,O,MAEJf,EAAAnB,GAASoB,OAAOG,QAAQ,mC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix, { Notify } from 'notiflix';\nconst form = document.querySelector('.form')\nconst amountInput = document.querySelector('input[name=amount');\nconst delayInput = document.querySelector('input[name=delay]');\nconst stepInput = document.querySelector('input[name=step]');\nconst greateBt = document.querySelector('button');\ngreateBt.addEventListener('click', createArrValue);\n\nfunction createArrValue(evt){\n  evt.preventDefault();\n  if (\n    amountInput.value !== '' &&\n    delayInput.value !== '' &&\n    stepInput.value !== ''\n  ) {\n    let amount = Number(amountInput.value);\n    let delay = Number(delayInput.value);\n    let step = Number(stepInput.value); \n    startGenerationPromise(amount, delay, step);\n    form.reset();\n  }else {\n     Notiflix.Notify.warning('Please fill in all the fields!!!');\n  }\n}\n\nfunction startGenerationPromise(amount, delay, step) {\n  for (let i = 0; i < amount; i += 1) {\n    setTimeout(createPromise, delay, i, delay );\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  })\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(\n        `✅ Fulfilled promise ${position + 1} in ${delay}ms`\n      );\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.warning(\n        `❌ Rejected promise ${position + 1} in ${delay}ms`\n      );\n    })\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$createPromise","position1","delay1","Promise","resolve","reject","Math","random","position","delay","then","$parcel$interopDefault","Notify","success","catch","warning","addEventListener","evt","preventDefault","value","amount","Number","step","i","setTimeout","$47d4ff9957288465$var$startGenerationPromise","reset"],"version":3,"file":"03-promises.b43a138a.js.map"}